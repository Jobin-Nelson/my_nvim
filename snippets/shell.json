{
  "parse": {
    "prefix": [
      "parse"
    ],
    "body": [
      "while getopts \":hv\" option; do",
      "\tcase \\$option in",
      "\th) usage ;;",
      "\tv) set -x ;;",
      "\t*)",
      "\t\techo \"Error: Invalid option\"",
      "\t\texit",
      "\t\t;;",
      "\tesac",
      "done"
    ],
    "description": "parse arguments"
  },
  "usage": {
    "prefix": [
      "usage"
    ],
    "body": [
      "function usage() {",
      "  cat <<EOM",
      "SYNOPSIS",
      "    \\$0 [-h] [-v]",
      "",
      "DESCRIPTION",
      "    This script will ...",
      "",
      "OPTIONS",
      "    -h    Print this help",
      "    -v    Verbose output",
      "",
      "EXAMPLES",
      "    \\$0 -h",
      "",
      "EOM",
      "",
      "  exit 0",
      "}"
    ],
    "description": "usage function"
  },
  "script-template-1": {
    "prefix": [
      "script-template-1"
    ],
    "body": [
      "#!/usr/bin/env bash",
      "",
      "set -Eeuo pipefail",
      "trap cleanup SIGINT SIGTERM ERR EXIT",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                    Global Variables                      ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "# shellcheck disable=SC2034",
      "SCRIPT_DIR=\"\\${0%/*\\}\"",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                    Utility Functions                     ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "usage() {",
      "  local script=\"\\${0%%*/\\}\"",
      "",
      "  cat <<EOF",
      "SYNOPSIS",
      "    \\${script\\} [-h] [-v] [-f] -p param_value arg1 [arg2...]",
      "",
      "DESCRIPTION",
      "    Script description here.",
      "",
      "OPTIONS",
      "    -h, --help      Print this help and exit",
      "    -v, --verbose   Print script debug info",
      "    -f, --flag      Some flag description",
      "    -p, --param     Some param description",
      "",
      "EXAMPLES",
      "    \\${script\\} {\\}",
      "",
      "EOF",
      "  exit",
      "\\}",
      "",
      "cleanup() {",
      "  trap - SIGINT SIGTERM ERR EXIT",
      "  # script cleanup here",
      "\\}",
      "",
      "setup_colors() {",
      "  if [[ -t 2 ]] && [[ -z \"\\${NO_COLOR-\\}\" ]] && [[ \"\\${TERM-\\}\" != \"dumb\" ]]; then",
      "    NOFORMAT='\\033[0m' RED='\\033[0;31m' GREEN='\\033[0;32m' ORANGE='\\033[0;33m' BLUE='\\033[0;34m' PURPLE='\\033[0;35m' CYAN='\\033[0;36m' YELLOW='\\033[1;33m'",
      "  else",
      "    # shellcheck disable=SC2034",
      "    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''",
      "  fi",
      "\\}",
      "",
      "msg() {",
      "  echo -e \"\\${GREEN\\}\\${1-\\}\\${NOFORMAT\\}\"",
      "\\}",
      "",
      "die() {",
      "  local msg=\\$1",
      "  local code=\\${2-1\\} # default exit status 1",
      "  echo \"\\${RED\\}\\${msg\\}\\${NOFORMAT\\}\" >&2",
      "  exit \"\\$code\"",
      "\\}",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                   Core Implementation                    ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                     Parse Arguments                      ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "parse_params() {",
      "  # default values of variables set from params",
      "  flag=0",
      "  param=''",
      "",
      "  while :; do",
      "    case \"\\${1-\\}\" in",
      "    -h | --help) usage ;;",
      "    -v | --verbose) set -x ;;",
      "    --no-color) NO_COLOR=1 ;;",
      "    -f | --flag) flag=1 ;; # example flag",
      "    -p | --param) # example named parameter",
      "      param=\"\\${2-\\}\"",
      "      shift",
      "      ;;",
      "    -?*) die \"Unknown option: \\$1\" ;;",
      "    *) break ;;",
      "    esac",
      "    shift",
      "  done",
      "",
      "  args=(\"\\$@\")",
      "",
      "  # check required params and arguments",
      "  [[ -z \"\\${param-\\}\" ]] && die \"Missing required parameter: param\"",
      "  [[ \\${#args[@]\\} -eq 0 ]] && die \"Missing script arguments\"",
      "",
      "  return 0",
      "\\}",
      "",
      "[[ \\$# == 0 ]] && usage",
      "parse_params \"\\$@\"",
      "setup_colors",
      "",
      "# script logic here",
      "",
      "msg \"\\${RED\\}Read parameters:\\${NOFORMAT\\}\"",
      "msg \"- flag: \\${flag\\}\"",
      "msg \"- param: \\${param\\}\"",
      "msg \"- arguments: \\${args[*]-\\}\"",
      ""
    ],
    "description": "script template 1"
  },
  "script-template-2": {
    "prefix": [
      "script-template-2"
    ],
    "body": [
      "#!/usr/bin/env bash",
      "",
      "set -Eeuo pipefail",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                    Global Variables                      ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "# shellcheck disable=SC2034",
      "SCRIPT_DIR=\"\\${0%/*\\}\"",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                    Utility Functions                     ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "usage() {",
      "  local script=\"\\${0%%*/\\}\"",
      "",
      "  cat <<EOF",
      "SYNOPSIS",
      "    \\${script\\} [-h] [-v]",
      "",
      "DESCRIPTION",
      "    Script description here.",
      "",
      "OPTIONS",
      "    -h   Print this [h]elp and exit",
      "    -v   Print [v]erbose info",
      "",
      "EXAMPLES",
      "    \\${script\\} -h",
      "",
      "EOF",
      "  exit 0",
      "\\}",
      "",
      "bail() {",
      "  echo \"\\$1\"",
      "  echo \\$'Aborting...\n'",
      "  exit \"\\${2-1\\}\"",
      "\\}",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                   Core Implementation                    ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "",
      "",
      "# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓",
      "# ┃                     Parse Arguments                      ┃",
      "# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛",
      "",
      "",
      "[[ \\$# == 0 ]] && usage",
      "",
      "while getopts \":hv\" option; do",
      "  case \\$option in",
      "  h) usage ;;",
      "  v) set -x ;;",
      "  *) bail \"Error: Invalid option\" ;;",
      "  esac",
      "done",
      ""
    ],
    "description": "script template 2"
  },
  "comment": {
    "prefix": "comment",
    "body": [
      "#######################################",
      "# ${1:Description of the function.}$0",
      "#######################################"
    ],
    "description": "A simple shell comment block for functions, with a description. Useful when the user prefers to add the other documentation tags manually."
  }
}
