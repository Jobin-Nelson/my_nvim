{
  "comment-section": {
    "prefix": "cs",
    "body": [
      "// region:    --- ${1:Section}",
      "",
      "$0",
      "",
      "// endregion: --- ${1:Section}"
    ],
    "description": "comment section"
  },
  "comment-delimiter": {
    "prefix": "cd",
    "body": [
      "// -- $0"
    ],
    "description": "comment delimiter"
  },

  "test-module": {
    "prefix": "mtest",
    "body": [
      "// region:    --- Tests",
      "",
      "#[cfg(test)]",
      "mod tests {",
      "\ttype Result<T> = core::result::Result<T, Box<dyn std::error::Error>>; // For tests.",
      "",
      "\tuse super::*;",
      "",
      "\t$0",
      "}",
      "",
      "// endregion: --- Tests"
    ],
    "description": "unit test submodule"
  },
  "async-comment-test": {
    "prefix": "actest",
    "body": [
      "#[tokio::test]",
      "async fn test_${1:name}() -> Result<()> {",
      "\t// -- Setup & Fixtures",
      "\t$0",
      "\t// -- Exec",
      "\t",
      "\t// -- Check",
      "\t",
      "\tOk(())",
      "}"
    ],
    "description": "async test with comment scaffolding"
  },
  "comment-test": {
    "prefix": "ctest",
    "body": [
      "#[test]",
      "fn test_${1:name}() -> Result<()> {",
      "\t// -- Setup & Fixtures",
      "\t$0",
      "\t// -- Exec",
      "\t",
      "\t// -- Check",
      "\t",
      "\tOk(())",
      "}"
    ],
    "description": "test with comment scaffolding"
  },

  "result-box-dyn-error": {
    "prefix": "rbde",
    "body": [
      "Result<${1:()}, Box<dyn std::error:Error>>"
    ],
    "description": "result<(), box dyn ...>"
  },
  "simple-enum-error": {
    "prefix": "see",
    "body": [
      "pub type Result<T> = core::result::Result<T, Error>;",
      "",
      "#[derive(Debug)]",
      "pub enum Error {",
      "\t$0",
      "}",
      "",
      "// region:    --- Error Boilerplate",
      "",
      "impl core::fmt::Display for Error {",
      "\tfn fmt(&self, fmt: &mut core::fmt::Formatter) -> core::result::Result<(), core::fmt::Error> {",
      "\t\twrite!(fmt, \"{self:?}\")",
      "\t}",
      "}",
      "",
      "impl std::error::Error for Error {}",
      "",
      "// endregion: --- Error Boilerplate"
    ],
    "description": "simple enum error"
  },
  "derive-enum-error": {
    "prefix": "dee",
    "body": [
      "use derive_more::{Display, From};",
      "",
      "pub type Result<T> = core::result::Result<T, Error>;",
      "",
      "#[derive(Debug, Display, From)]",
      "#[display(\"{self:?}\")]",
      "pub enum Error {",
      "\t$0",
      "\t// -- Externals",
      "\t#[from]",
      "\tIo(std::io::Error),",
      "}",
      "",
      "// region:    --- Error Boilerplate",
      "",
      "impl std::error::Error for Error {}",
      "",
      "// endregion: --- Error Boilerplate"
    ],
    "description": "derive enum error"
  },
  "derive-custom-enum-error": {
    "prefix": "dcee",
    "body": [
      "use derive_more::{Display, From};",
      "",
      "pub type Result<T> = core::result::Result<T, Error>;",
      "",
      "#[derive(Debug, Display, From)]",
      "#[display(\"{self:?}\")]",
      "pub enum Error {",
      "\t#[from(String, &String, &str)]",
      "\tCustom(String),",
      "",
      "\t$0",
      "\t// -- Externals",
      "\t#[from]",
      "\tIo(std::io::Error),",
      "}",
      "",
      "// region:    --- Custom",
      "",
      "impl Error {",
      "\tpub fn custom_from_err(err: impl std::error::Error) -> Self {",
      "\t\tSelf::Custom(err.to_string())",
      "\t}",
      "",
      "\tpub fn custom(val: impl Into<String>) -> Self {",
      "\t\tSelf::Custom(val.into())",
      "\t}",
      "}",
      "",
      "// endregion: --- Custom",
      "",
      "// region:    --- Error Boilerplate",
      "",
      "impl std::error::Error for Error {}",
      "",
      "// endregion: --- Error Boilerplate",
      ""
    ],
    "description": "derive custom enum error"
  },

  "example-main": {
    "prefix": "xm",
    "body": [
      "fn main() -> Result<(), Box<dyn std::error::Error>> {",
      "\t$0;",
      "",
      "\tOk(())",
      "}",
      ""
    ],
    "description": "example main"
  },
  "async-example-main": {
    "prefix": "axm",
    "body": [
      "#[tokio::main]",
      "async fn main() -> Result<(), Box<dyn std::error::Error>> {",
      "\t$0;",
      "",
      "\tOk(())",
      "}",
      ""
    ],
    "description": "async example main"
  },

  "lib-module": {
    "prefix": "lm",
    "body": [
      "// region:    --- Modules",
      "",
      "mod error;",
      "",
      "pub use error::{Error, Result};",
      "",
      "// endregion: --- Modules",
      ""
    ],
    "description": "lib module"
  }
}
